#include "lookup.h"

const static uint8_t L_FIRST_BIT[] = {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1};
uint8_t l_get_first_bit(uint8_t x) {
    return L_FIRST_BIT[x];
}

const static uint8_t L_RIGHT_SHIFT[] = {0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 86, 86, 87, 87, 88, 88, 89, 89, 90, 90, 91, 91, 92, 92, 93, 93, 94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 108, 108, 109, 109, 110, 110, 111, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116, 116, 117, 117, 118, 118, 119, 119, 120, 120, 121, 121, 122, 122, 123, 123, 124, 124, 125, 125, 126, 126, 127, 127};
uint8_t l_right_shift_one(uint8_t x) {
    return L_RIGHT_SHIFT[x];
}

const static uint8_t L_LEFT_SHIFT[] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254};
uint8_t l_left_shift_one(uint8_t x) {
    return L_LEFT_SHIFT[x];
}

const static uint8_t L_LAST_BIT[] = {
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
    128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255
};
uint8_t l_set_last_bit(uint8_t x, uint8_t one_bit) {
    assert(one_bit <= 1);

    uint16_t index = x;
    uint8_t* index_p = reinterpret_cast<uint8_t*>(&index);

    index_p[1] = one_bit;

    return L_LAST_BIT[index];
}

uint8_t l_concat_bits(uint8_t one_a, uint8_t one_b) {
    assert(one_a <= 1);
    assert(one_b <= 1);

    uint8_t out = 0;
    out = l_set_last_bit(out, one_b);
    out = l_right_shift_one(out);
    out = l_set_last_bit(out, one_a);

    REPEAT(6)
        out = l_right_shift_one(out);

    return out;
}

const static uint8_t L_XOR[] = { 0, 1, 1, 0 };
uint8_t l_xor_bits(uint8_t one_a, uint8_t one_b) {
    assert(one_a <= 1);
    assert(one_b <= 1);

    uint8_t index = l_concat_bits(one_a, one_b);

    return L_XOR[index];
}

const static uint8_t L_AND[] = { 0, 0, 0, 1 };
uint8_t l_and_bits(uint8_t one_a, uint8_t one_b) {
    assert(one_a <= 1);
    assert(one_b <= 1);

    uint8_t index = l_concat_bits(one_a, one_b);

    return L_AND[index];
}

const static uint8_t L_OR[] = { 0, 1, 1, 1 };
uint8_t l_or_bits(uint8_t one_a, uint8_t one_b) {
    assert(one_a <= 1);
    assert(one_b <= 1);

    uint8_t index = l_concat_bits(one_a, one_b);

    return L_OR[index];
}

uint8_t l_not_bits(uint8_t one_a) {
    assert(one_a <= 1);

    return l_xor_bits(one_a, 1);
}

uint8_t l_xor(uint8_t a, uint8_t b) {
    uint8_t one_a, one_b, one_out;
    uint8_t out = 0;

    REPEAT(8)
    {
        one_a = l_get_first_bit(a);
        one_b = l_get_first_bit(b);
        one_out = l_xor_bits(one_a, one_b);

        a = l_right_shift_one(a);
        b = l_right_shift_one(b);
        out = l_right_shift_one(out);

        out = l_set_last_bit(out, one_out);
    }

    return out;
}

void l_add_bits(uint8_t one_a, uint8_t one_b, uint8_t one_c, uint8_t* sum, uint8_t* carry) {
    assert(one_a <= 1);
    assert(one_b <= 1);
    assert(one_c <= 1);

    *sum = l_xor_bits(l_xor_bits(one_a, one_b), one_c);

    uint8_t group1 = l_and_bits(one_a, one_b);
    uint8_t group2 = l_and_bits(one_b, one_c);
    uint8_t group3 = l_and_bits(one_c, one_a);

    *carry = l_or_bits(l_or_bits(group1, group2), group3);
}

uint8_t l_add(uint8_t a, uint8_t b) {
    uint8_t one_a, one_b, one_sum;
    uint8_t one_carry = 0;
    uint8_t out = 0;

    REPEAT(8)
    {
        one_a = l_get_first_bit(a);
        one_b = l_get_first_bit(b);
        l_add_bits(one_a, one_b, one_carry, &one_sum, &one_carry);

        a = l_right_shift_one(a);
        b = l_right_shift_one(b);
        out = l_right_shift_one(out);

        out = l_set_last_bit(out, one_sum);
    }

    return out;
}


uint8_t l_get_last_bit(uint8_t x) {
    REPEAT(7)
        x = l_right_shift_one(x);

    assert(x <= 1);

    return x;
}

uint8_t l_greater_than(uint8_t a, uint8_t b) {
    uint8_t one_a, one_b;
    uint8_t one_b_gt = 0;
    uint8_t out = 0;

    REPEAT(8)
    {
        one_a = l_get_last_bit(a);
        one_b = l_get_last_bit(b);

        one_b_gt = l_or_bits(one_b_gt, l_and_bits(l_not_bits(one_a), one_b));
        out = l_or_bits(out, l_and_bits(l_and_bits(one_a, l_not_bits(one_b)), l_not_bits(one_b_gt)));

        a = l_left_shift_one(a);
        b = l_left_shift_one(b);
    }

    return out;
}